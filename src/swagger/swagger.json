{
  "openapi": "3.0.0",
  "info": {
    "title": "User CRUD API with Authentication",
    "description": "API for managing users, authentication, and projects with JWT-based security",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "https://test-user-crud-api-215742463493.asia-northeast1.run.app",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "API endpoints for user authentication"
    },
    {
      "name": "Users",
      "description": "API endpoints for user management"
    },
    {
      "name": "Projects",
      "description": "API endpoints for project management"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "age": {
            "type": "integer",
            "nullable": true,
            "example": 30
          }
        },
        "required": ["id", "name", "email"]
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": ["user", "token"]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 20,
            "example": "mypassword123"
          }
        },
        "required": ["email", "password"]
      },
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "pattern": "^[a-zA-Z0-9.\\-'\\s]+$",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 20,
            "example": "mypassword123"
          },
          "age": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "maximum": 120,
            "example": 30
          }
        },
        "required": ["name", "email", "password"]
      },
      "CreateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "pattern": "^[a-zA-Z0-9.\\-'\\s]+$",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "example": "john@example.com"
          },
          "age": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "maximum": 120,
            "example": 30
          }
        },
        "required": ["name", "email"]
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "pattern": "^[a-zA-Z0-9.\\-'\\s]+$",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "example": "john@example.com"
          },
          "age": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "maximum": 120,
            "example": 30
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "title": {
            "type": "string",
            "maxLength": 100,
            "example": "Website Redesign"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 500,
            "example": "Complete redesign of the company website"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "completed"],
            "default": "pending",
            "example": "in_progress"
          },
          "userId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "minItems": 1,
            "example": [1, 2, 3],
            "description": "Array of user IDs assigned to this project (no duplicates allowed)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-01-27T10:30:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-01-27T10:30:00Z"
          }
        },
        "required": ["id", "title", "status", "userId"]
      },
      "CreateProjectRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 100,
            "pattern": "^[a-zA-Z0-9.\\-'\\s]+$",
            "example": "Website Redesign",
            "description": "Project title"
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "nullable": true,
            "example": "Complete redesign of the company website"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "completed"],
            "default": "pending",
            "example": "pending"
          },
          "userId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            },
            "minItems": 1,
            "uniqueItems": true,
            "example": [1, 2],
            "description": "Array of user IDs to assign to this project (must contain at least one user, no duplicates)"
          }
        },
        "required": ["title", "userId"]
      },
      "UpdateProjectRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 100,
            "pattern": "^[a-zA-Z0-9.\\-'\\s]+$",
            "example": "Website Redesign"
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "nullable": true,
            "example": "Complete redesign of the company website"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "completed"],
            "example": "in_progress"
          },
          "userId": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            },
            "minItems": 1,
            "uniqueItems": true,
            "example": [1, 2, 3],
            "description": "Array of user IDs to assign to this project (must contain at least one user, no duplicates)"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Error description"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["Validation error 1", "Validation error 2"]
          }
        }
      }
    }
  },
  "paths": {
    "/api/v1/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user",
        "description": "Create a new user account with encrypted password",
        "operationId": "register",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "User with this email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login user",
        "description": "Authenticate user and return JWT token",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Invalid password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users",
        "description": "Returns a list of all users (excluding password field). Currently unprotected - consider adding authentication.",
        "operationId": "findAllUsers",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create a new user",
        "description": "Add a new user to the database (no password required, unprotected endpoint)",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "User with this email already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "description": "Returns a single user by ID. Currently unprotected - consider adding authentication.",
        "operationId": "findUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update an existing user",
        "description": "Update a user by ID (requires authentication and user can only update their own profile)",
        "operationId": "updateUser",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or ID parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No token provided"
          },
          "403": {
            "description": "Forbidden - Invalid token or unauthorized user"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "User with this email already exists"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete a user",
        "description": "Delete a user by ID (requires authentication and user can only delete their own profile)",
        "operationId": "deleteUser",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully (No Content)"
          },
          "400": {
            "description": "Invalid ID parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No token provided"
          },
          "403": {
            "description": "Forbidden - Invalid token or unauthorized user"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/projects": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get all projects",
        "description": "Returns a list of all projects (currently unprotected)",
        "operationId": "findAllProjects",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": ["Projects"],
        "summary": "Create a new project",
        "description": "Add a new project to the database (requires authentication). All user IDs in the userId array must exist.",
        "operationId": "createProject",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No token provided"
          },
          "403": {
            "description": "Forbidden - Invalid token"
          },
          "404": {
            "description": "One or more users not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/projects/{id}": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get project by ID",
        "description": "Returns a single project by ID (currently unprotected)",
        "operationId": "findProjectById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of project to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": ["Projects"],
        "summary": "Update an existing project",
        "description": "Update a project by ID (requires authentication). All user IDs in the userId array must exist.",
        "operationId": "updateProject",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of project to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or ID parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No token provided"
          },
          "403": {
            "description": "Forbidden - Invalid token"
          },
          "404": {
            "description": "Project not found or one or more users not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": ["Projects"],
        "summary": "Delete a project",
        "description": "Delete a project by ID (requires authentication)",
        "operationId": "deleteProject",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of project to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Project deleted successfully (No Content)"
          },
          "400": {
            "description": "Invalid ID parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - No token provided"
          },
          "403": {
            "description": "Forbidden - Invalid token"
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}
